#+PROPERTY: header-args :tangle yes :results none
#+STARTUP: overview

* doom
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;; user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src
* settings
#+begin_src emacs-lisp
(setq! auto-revert-verbose nil
       blink-matching-paren t
       bookmark-default-file "~/.doom.d/lisp/bookmarks"
       confirm-kill-emacs nil
       display-line-numbers-type nil
       doom-font (font-spec :family "monospace" :size 27 :weight 'semi-light)
       doom-theme 'doom-one
       doom-variable-pitch-font (font-spec :family "sans" :size 28)
       eldoc-idle-delay 100
       flycheck-global-modes '(not emacs-lisp-mode lisp-interaction-mode)
       header-line-format "  " ;; source: https://bit.ly/2tdnkkh
       kill-whole-line t
       markdown-hide-urls t
       persp-emacsclient-init-frame-behaviour-override nil
       register-preview-delay 2
       text-scale-mode-step 1.06
       use-package-always-defer t
       use-package-always-ensure t
       user-full-name "mr big"
       user-mail-address "mrbig033@protonmail.com"
       windmove-wrap-around t)
#+end_src
* functions
#+begin_src emacs-lisp
(defun my-backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))

(defun my-disable-edits ()
  (interactive)
  (map! :i "C-w" 'ignore
        :i "C-u" 'ignore
        :i "C-k" 'ignore
        :i "C-d" 'ignore
        :i "C-h" 'ignore)
  (message "edits disabled"))

(defun my-enable-edits ()
  (interactive)
  (map! :i "C-w" 'evil-delete-backward-word
        :i "C-u" 'my-backward-kill-line
        :i "C-k" 'evil-delete-backward-word
        :i "C-d" 'delete-char
        :i "C-h" 'evil-delete-backward-char-and-join)
  (message "edits enabled"))

#+end_src
* packages
** org
#+begin_src emacs-lisp
(use-package! org
  :after-call after-find-file
  :init
  (remove-hook 'org-cycle-hook 'org-optimize-window-after-visibility-change)
  (remove-hook 'org-mode-hook 'flyspell-mode)
  (add-hook! 'org-src-mode-hook 'my-indent-buffer)
  (add-hook! 'org-agenda-mode-hook 'hl-line-mode)
  (add-hook 'org-mode-hook (lambda ()
                             (flycheck-mode -1)))
  :custom
  (org-agenda-hide-tags-regexp ".")
  (org-agenda-show-all-dates nil)
  (org-agenda-show-future-repeats 'next)
  (org-agenda-show-outline-path nil)
  (org-agenda-skip-additional-timestamps-same-entry t)
  (org-agenda-skip-archived-trees nil)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-timestamp-if-deadline-is-shown t)
  (org-agenda-skip-timestamp-if-done t)
  (org-agenda-skip-unavailable-files t)
  (org-archive-location ".%s::datetree/")
  (org-attach-auto-tag "at")
  (org-catch-invisible-edits 'smart)
  (org-clock-auto-clock-resolution 'when-no-clock-is-running)
  (org-clock-clocked-in-display nil)
  (org-clock-display-default-range 'thisyear)
  (org-clock-history-length 10)
  (org-clock-in-resume t)
  (org-clock-into-drawer t)
  (org-clock-mode-line-total 'auto)
  (org-clock-persist t)
  (org-clock-persist-query-resume t)
  (org-clock-report-include-clocking-task t)
  (org-clock-update-period 240)
  (org-directory "~/org/")
  (org-drawers (quote ("properties" "logbook"))) ;; Separate drawers for clocking and logs
  (org-edit-src-auto-save-idle-delay 1)
  (org-edit-src-persistent-message nil)
  (org-ellipsis ".")
  (org-enforce-todo-checkbox-dependencies t)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-fontify-todo-headline t)
  (org-fontify-whole-heading-line t)
  (org-footnote-auto-label t)
  (org-hide-emphasis-markers nil)
  (org-log-into-drawer t)
  (org-odt-fontify-srcblocks t)
  (org-src-ask-before-returning-to-edit-buffer nil)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-startup-folded 'overview)

  ;; (org-agenda-tags-column -80)
  :config

  (set-company-backend! 'org-mode
    'company-ispell 'company-dabbrev 'company-capf)

  (add-to-list 'org-link-abbrev-alist '("at" . org-attach-expand-link))
  (set-popup-rule! "*Org Agenda*" :side 'bottom :modeline t :height 19 :quit 't)

  (setq org-file-apps '((auto-mode . emacs)
                        (directory . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . default)
                        ("\\.pdf\\'" . default))
        org-todo-keywords '((sequence "T(t)" "S(s!)" "|" "D(d!)")))

  (general-unbind 'evil-org-agenda-mode-map
    :with 'org-agenda-next-item
    [remap org-agenda-next-line])

  (general-unbind 'evil-org-agenda-mode-map
    :with 'org-agenda-previous-item
    [remap org-agenda-previous-line]))

(after! org
  (setq-default org-src-window-setup 'current-window))
#+end_src
** misc
#+begin_src emacs-lisp
(use-package! doom-modeline
  :custom
  (doom-modeline-env-version nil)
  (doom-modeline-env-enable-go nil)
  (doom-modeline-major-mode-icon nil)
  (doom-modeline-buffer-state-icon nil)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-enable-word-count t)
  (doom-modeline-env-enable-ruby nil)
  (doom-modeline-env-enable-perl nil)
  (doom-modeline-env-enable-rust nil)
  (doom-modeline-env-enable-python nil)
  (doom-modeline-env-enable-elixir nil)
  (doom-modeline-checker-simple-format t)
  (doom-modeline-buffer-modification-icon nil)
  (doom-modeline-env-load-string ".")
  (doom-modeline-icon nil)
  (doom-modeline-buffer-file-name-style 'buffer-name))

(use-package! super-save
  :after-call after-find-file
  :custom
  (auto-save-default nil)
  (super-save-exclude '(".py"))
  (super-save-remote-files nil)
  (super-save-idle-duration 10)
  (super-save-auto-save-when-idle nil)
  :config
  (setq super-save-triggers '(windmove-up
                              ;; counsel-M-x
                              next-buffer
                              other-window
                              +eval/buffer
                              windmove-down
                              windmove-left
                              windmove-right
                              previous-buffer
                              switch-to-buffer
                              org-edit-special
                              org-edit-src-exit
                              my-find-config.el
                              my-find-config.org
                              my-search-settings
                              my-org-edit-special
                              my-org-edit-src-exit
                              kill-buffer-and-window
                              eyebrowse-next-window-config
                              eyebrowse-last-window-config
                              eyebrowse-close-window-config
                              eyebrowse-create-window-config
                              my-search-settings-from-src-buffer))
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (defun super-save-command ()
    (when (and buffer-file-name
               (buffer-modified-p (current-buffer))
               (file-writable-p buffer-file-name)
               (if (file-remote-p buffer-file-name) super-save-remote-files t)
               (super-save-include-p buffer-file-name))
      (my-just-save-buffer-quiet)))
  (super-save-mode +1))
#+end_src

* keybindings
#+begin_src emacs-lisp
(map! :i "C-a" 'move-beginning-of-line
      :i "C-b" 'backward-char
      :i "C-d" 'delete-char
      :i "C-e" 'move-end-of-line
      :i "C-f" 'forward-char
      :i "C-h" 'evil-delete-backward-char-and-join
      :i "C-k" 'kill-line
      :i "C-n" 'next-line
      :i "C-p" 'previous-line
      :i "C-u" 'my-backward-kill-line
      :i "C-w" 'evil-delete-backward-word
      "M-d"    'evil-switch-to-windows-last-buffer
      :desc "Count Words" :leader "W" 'count-words
      :desc "Edits Enabled" :leader "tE" 'my-enable-edits)
#+end_src
